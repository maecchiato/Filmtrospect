//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForumInterface.CommentReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="comment", Namespace="http://schemas.datacontract.org/2004/07/WebForumServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class comment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Comment_TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long Movie_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long Movie_RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment_Text {
            get {
                return this.Comment_TextField;
            }
            set {
                if ((object.ReferenceEquals(this.Comment_TextField, value) != true)) {
                    this.Comment_TextField = value;
                    this.RaisePropertyChanged("Comment_Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Movie_ID {
            get {
                return this.Movie_IDField;
            }
            set {
                if ((this.Movie_IDField.Equals(value) != true)) {
                    this.Movie_IDField = value;
                    this.RaisePropertyChanged("Movie_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Movie_Rate {
            get {
                return this.Movie_RateField;
            }
            set {
                if ((this.Movie_RateField.Equals(value) != true)) {
                    this.Movie_RateField = value;
                    this.RaisePropertyChanged("Movie_Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="activitylog", Namespace="http://schemas.datacontract.org/2004/07/WebForumServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class activitylog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long Account_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Account_ID {
            get {
                return this.Account_IDField;
            }
            set {
                if ((this.Account_IDField.Equals(value) != true)) {
                    this.Account_IDField = value;
                    this.RaisePropertyChanged("Account_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CommentReference.ICommentService")]
    public interface ICommentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/createComment", ReplyAction="http://tempuri.org/ICommentService/createCommentResponse")]
        string createComment(int userID, string comment_text, System.DateTime timestamp, int thread_ID, int rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/createComment", ReplyAction="http://tempuri.org/ICommentService/createCommentResponse")]
        System.Threading.Tasks.Task<string> createCommentAsync(int userID, string comment_text, System.DateTime timestamp, int thread_ID, int rate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/insertComment", ReplyAction="http://tempuri.org/ICommentService/insertCommentResponse")]
        string insertComment(ForumInterface.CommentReference.comment newComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/insertComment", ReplyAction="http://tempuri.org/ICommentService/insertCommentResponse")]
        System.Threading.Tasks.Task<string> insertCommentAsync(ForumInterface.CommentReference.comment newComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/activity", ReplyAction="http://tempuri.org/ICommentService/activityResponse")]
        void activity(int userID, int movieID, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/activity", ReplyAction="http://tempuri.org/ICommentService/activityResponse")]
        System.Threading.Tasks.Task activityAsync(int userID, int movieID, System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/insertActivity", ReplyAction="http://tempuri.org/ICommentService/insertActivityResponse")]
        void insertActivity(ForumInterface.CommentReference.activitylog act);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommentService/insertActivity", ReplyAction="http://tempuri.org/ICommentService/insertActivityResponse")]
        System.Threading.Tasks.Task insertActivityAsync(ForumInterface.CommentReference.activitylog act);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommentServiceChannel : ForumInterface.CommentReference.ICommentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommentServiceClient : System.ServiceModel.ClientBase<ForumInterface.CommentReference.ICommentService>, ForumInterface.CommentReference.ICommentService {
        
        public CommentServiceClient() {
        }
        
        public CommentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string createComment(int userID, string comment_text, System.DateTime timestamp, int thread_ID, int rate) {
            return base.Channel.createComment(userID, comment_text, timestamp, thread_ID, rate);
        }
        
        public System.Threading.Tasks.Task<string> createCommentAsync(int userID, string comment_text, System.DateTime timestamp, int thread_ID, int rate) {
            return base.Channel.createCommentAsync(userID, comment_text, timestamp, thread_ID, rate);
        }
        
        public string insertComment(ForumInterface.CommentReference.comment newComment) {
            return base.Channel.insertComment(newComment);
        }
        
        public System.Threading.Tasks.Task<string> insertCommentAsync(ForumInterface.CommentReference.comment newComment) {
            return base.Channel.insertCommentAsync(newComment);
        }
        
        public void activity(int userID, int movieID, System.DateTime time) {
            base.Channel.activity(userID, movieID, time);
        }
        
        public System.Threading.Tasks.Task activityAsync(int userID, int movieID, System.DateTime time) {
            return base.Channel.activityAsync(userID, movieID, time);
        }
        
        public void insertActivity(ForumInterface.CommentReference.activitylog act) {
            base.Channel.insertActivity(act);
        }
        
        public System.Threading.Tasks.Task insertActivityAsync(ForumInterface.CommentReference.activitylog act) {
            return base.Channel.insertActivityAsync(act);
        }
    }
}
